import os
import logging
import aiosqlite
from datetime import datetime, timedelta
import asyncio

from quart import Quart, request, jsonify
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
TELEGRAM_WEBHOOK_URL = os.getenv('TELEGRAM_WEBHOOK_URL')

if not TELEGRAM_WEBHOOK_URL:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –∏ Telegram-–±–æ—Ç–∞
app = Quart(__name__)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("conversions.db") as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS conversions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pp_name TEXT,
                offer_id TEXT,
                conversion_date TEXT,
                revenue REAL,
                currency TEXT,
                status TEXT
            )
        ''')
        await conn.commit()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
async def save_conversion(data):
    async with aiosqlite.connect("conversions.db") as conn:
        await conn.execute('''
            INSERT INTO conversions (pp_name, offer_id, conversion_date, revenue, currency, status)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            data.get('pp_name', 'N/A'),
            data.get('offer_id', 'N/A'),
            data.get('conversion_date', 'N/A'),
            data.get('revenue', 0),
            data.get('currency', 'N/A'),
            data.get('status', 'N/A')
        ))
        await conn.commit()

# –£–ª—É—á—à–µ–Ω–Ω—ã–π Webhook —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def set_telegram_webhook():
    full_url = TELEGRAM_WEBHOOK_URL.rstrip('/') + '/telegram'
    response = await bot.set_webhook(url=full_url)
    if response:
        logger.info(f"Webhook –¥–ª—è Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
    else:
        logger.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook!")
        exit(1)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–±–µ–∫–æ–≤
@app.route('/webhook', methods=['POST'])
async def webhook():
    try:
        data = await request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

        if not data:
            logger.error("–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return jsonify({"error": "Bad Request: No data"}), 400

        await save_conversion(data)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        await send_telegram_message_async(data)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        return jsonify({"status": "OK"}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return jsonify({"error": "Internal Server Error"}), 500

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message_async(data):
    try:
        message = (
            f"üìå –û—Ñ—Ñ–µ—Ä: {data.get('offer_id', 'N/A')}\n"
            f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {data.get('status', 'N/A')}\n"
            f"ü§ë –í—ã–ø–ª–∞—Ç–∞: {data.get('revenue', 'N/A')} {data.get('currency', 'N/A')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data.get('conversion_date', 'N/A')}"
        )
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    await init_db()
    await set_telegram_webhook()
    port = int(os.getenv('PORT', 8080))
    await app.run_task(host='0.0.0.0', port=port)

if __name__ == '__main__':
    asyncio.run(main())

