from quart import Quart, request
from telegram import Bot
import os
import logging
import sqlite3
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')  # Chat ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –∏ Telegram –±–æ—Ç–∞
app = Quart(__name__)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('conversions.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pp_name TEXT,
            offer_id TEXT,
            conversion_date TEXT,
            revenue REAL,
            currency TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_conversion(data):
    conn = sqlite3.connect('conversions.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO conversions (pp_name, offer_id, conversion_date, revenue, currency)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        data.get('pp_name', 'N/A'),
        data.get('offer_id', 'N/A'),
        data.get('conversion_date', 'N/A'),
        data.get('revenue', 0),
        data.get('currency', 'N/A')
    ))
    conn.commit()
    conn.close()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message_async(data):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    """
    try:
        message = (
            f"<b>üîî –ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
            f"üìå <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b> <i>{data.get('pp_name', 'N/A')}</i>\n"
            f"üìå <b>–û—Ñ—Ñ–µ—Ä:</b> <i>{data.get('offer_id', 'N/A')}</i>\n"
            f"üÜî <b>ID –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{data.get('id', 'N/A')}</i>\n"
            f"üõ† <b>–ü–æ–¥—Ö–æ–¥:</b> <i>{data.get('sub_id3', 'N/A')}</i>\n"
            f"üìä <b>–¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{data.get('goal', 'N/A')}</i>\n"
            f"‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{data.get('status', 'N/A')}</i>\n"
            f"ü§ë <b>–í—ã–ø–ª–∞—Ç–∞:</b> <i>{data.get('revenue', 'N/A')} {data.get('currency', 'N/A')}</i>\n"
            f"üéØ <b>–ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{data.get('sub_id4', 'N/A')}</i>\n"
            f"üéØ <b>–ê–¥—Å–µ—Ç:</b> <i>{data.get('sub_id5', 'N/A')}</i>\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> <i>{data.get('conversion_date', 'N/A')}</i>"
        )
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='HTML')
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤
@app.route('/webhook', methods=['GET', 'POST'])
async def webhook():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∏ POST –∑–∞–ø—Ä–æ—Å—ã.
    """
    try:
        if request.method == 'POST':
            data = await request.json  # –î–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
        else:
            data = request.args  # –î–∞–Ω–Ω—ã–µ –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        if data is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ä–∞–≤–Ω—ã None.")
            return 'Bad Request: –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', 400

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        message_data = {
            'pp_name': data.get('pp_name', 'N/A'),
            'offer_id': data.get('offer_id', 'N/A'),
            'id': data.get('id', 'N/A'),
            'sub_id3': data.get('sub_id3', 'N/A'),
            'goal': data.get('goal', 'N/A'),
            'status': data.get('status', 'N/A'),
            'revenue': data.get('revenue', 'N/A'),
            'currency': data.get('currency', 'N/A'),
            'sub_id4': data.get('sub_id4', 'N/A'),
            'sub_id5': data.get('sub_id5', 'N/A'),
            'conversion_date': data.get('conversion_date', 'N/A')
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_conversion(message_data)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram: {message_data}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        await send_telegram_message_async(message_data)
        return 'OK', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return 'Internal Server Error', 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_statistics(start_date=None, end_date=None, offer_id=None, pp_name=None):
    conn = sqlite3.connect('conversions.db')
    cursor = conn.cursor()

    query = '''
        SELECT pp_name, offer_id, SUM(revenue), COUNT(*)
        FROM conversions
        WHERE 1=1
    '''
    params = []

    if start_date:
        query += ' AND conversion_date >= ?'
        params.append(start_date)
    if end_date:
        query += ' AND conversion_date <= ?'
        params.append(end_date)
    if offer_id:
        query += ' AND offer_id = ?'
        params.append(offer_id)
    if pp_name:
        query += ' AND pp_name = ?'
        params.append(pp_name)

    query += ' GROUP BY pp_name, offer_id'
    cursor.execute(query, params)
    results = cursor.fetchall()
    conn.close()

    return results

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats(update, context):
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        start_date = None
        end_date = None
        offer_id = None
        pp_name = None

        for i in range(0, len(args), 2):
            if args[i] == 'start_date':
                start_date = args[i + 1]
            elif args[i] == 'end_date':
                end_date = args[i + 1]
            elif args[i] == 'offer_id':
                offer_id = args[i + 1]
            elif args[i] == 'pp_name':
                pp_name = args[i + 1]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_data = get_statistics(start_date, end_date, offer_id, pp_name)

        if not stats_data:
            await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        for row in stats_data:
            pp_name, offer_id, total_revenue, total_conversions = row
            message += (
                f"üìå –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: <i>{pp_name}</i>\n"
                f"üìå –û—Ñ—Ñ–µ—Ä: <i>{offer_id}</i>\n"
                f"ü§ë –û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞: <i>{total_revenue}</i>\n"
                f"üìä –ö–æ–Ω–≤–µ—Ä—Å–∏–π: <i>{total_conversions}</i>\n\n"
            )

        await update.message.reply_text(message, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è favicon.ico
@app.route('/favicon.ico')
async def favicon():
    return '', 204  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç

# –ó–∞–ø—É—Å–∫ Quart-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    port = int(os.getenv('PORT', 5000))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 5000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    app.run(host='0.0.0.0', port=port)
