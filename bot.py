import os
import logging
import sqlite3
from datetime import datetime, timedelta
from quart import Quart, request
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –∏ Telegram –±–æ—Ç–∞
app = Quart(__name__)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('conversions.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS conversions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pp_name TEXT,
                offer_id TEXT,
                conversion_date TEXT,
                revenue REAL,
                currency TEXT,
                status TEXT
            )
        ''')
        conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
def get_statistics(start_date, end_date):
    with sqlite3.connect("conversions.db") as conn:
        cursor = conn.cursor()
        query = '''
            SELECT 
                COUNT(*) AS total, 
                SUM(revenue) AS total_revenue, 
                SUM(CASE WHEN status = "approved" THEN 1 ELSE 0 END) AS approved,
                SUM(CASE WHEN status = "pending" THEN 1 ELSE 0 END) AS pending,
                SUM(CASE WHEN status = "rejected" THEN 1 ELSE 0 END) AS rejected
            FROM conversions
            WHERE conversion_date BETWEEN ? AND ?
        '''
        cursor.execute(query, (start_date, end_date))
        result = cursor.fetchone()
        return result

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
def format_stats_message(stats_data, title):
    if not stats_data or stats_data[0] is None:
        return f"üìä {title}:

–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    message = (
        f"üìä <b>{title}</b>\n"
        f"‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: <b>{stats_data[2]}</b>\n"
        f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: <b>{stats_data[3]}</b>\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{stats_data[4]}</b>\n"
        f"üí∞ –û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞: <b>{stats_data[1] if stats_data[1] else 0} $</b>"
    )
    return message

# –ö–æ–º–∞–Ω–¥—ã Telegram –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime('%Y-%m-%d')
    stats_data = await asyncio.to_thread(get_statistics, today, today)
    message = format_stats_message(stats_data, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
    await update.message.reply_text(message, parse_mode="HTML")

async def stats_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    start_week = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    today = datetime.now().strftime('%Y-%m-%d')
    stats_data = await asyncio.to_thread(get_statistics, start_week, today)
    message = format_stats_message(stats_data, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
    await update.message.reply_text(message, parse_mode="HTML")

async def stats_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    first_day_of_month = datetime.now().replace(day=1).strftime('%Y-%m-%d')
    today = datetime.now().strftime('%Y-%m-%d')
    stats_data = await asyncio.to_thread(get_statistics, first_day_of_month, today)
    message = format_stats_message(stats_data, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
    await update.message.reply_text(message, parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("stats_today", stats_today))
    application.add_handler(CommandHandler("stats_week", stats_week))
    application.add_handler(CommandHandler("stats_month", stats_month))
    await application.run_polling()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    init_db()
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(run_bot())
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
